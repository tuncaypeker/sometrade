//@version=3
// Copyright (c) 2018-present, Alex Orekhov (everget)
// Rocket RSI script may be freely distributed under the MIT license.
study("Rocket RSI", shorttitle="Rocket RSI")

rsiLength = input(title="RSI Length", type=integer, defval=10)
ssfPoles = input(title="Super Smoother Filter Poles", type=integer, defval=2, options=[2, 3])
ssfLength = input(title="Super Smoother Filter Length", type=integer, defval=8)
obosLevel = input(title="Overbought / Oversold Level", type=float, defval=2.0, minval=0.0)
applyNormalization = input(title="Apply Normalization to [-100, 100] values ?", type=bool, defval=false)
src = input(title="Source", type=source, defval=close)

PI = 2 * asin(1)

get2PoleSSF(src, length) =>
    arg = sqrt(2) * PI / length
    a1 = exp(-arg)
    b1 = 2 * a1 * cos(arg)
    c2 = b1
    c3 = -pow(a1, 2)
    c1 = 1 - c2 - c3
    
    ssf = 0.0
    ssf := c1 * src + c2 * nz(ssf[1]) + c3 * nz(ssf[2])

get3PoleSSF(src, length) =>
    arg = PI / length
    a1 = exp(-arg)
    b1 = 2 * a1 * cos(1.738 * arg)
    c1 = pow(a1, 2)

    coef2 = b1 + c1
    coef3 = -(c1 + b1 * c1)
    coef4 = pow(c1, 2)
    coef1 = 1 - coef2 - coef3 - coef4

    ssf = 0.0
    ssf := coef1 * src + coef2 * nz(ssf[1]) + coef3 * nz(ssf[2]) + coef4 * nz(ssf[3])

// Create half dominant cycle momentum
mom = change(src, rsiLength - 1)
arg = (mom + nz(mom[1])) / 2

// Super Smoother Filter
ssf = ssfPoles == 2
     ? get2PoleSSF(arg, ssfLength)
     : get3PoleSSF(arg, ssfLength)

// Accumulate `Closes Up` and `Closes Down`
ssfMom = change(ssf)
upSum = sum(ssfMom > 0 ? ssfMom : 0, rsiLength)
downSum = sum(ssfMom > 0 ? 0 : abs(ssfMom), rsiLength)

tmp = 0.0
tmp := upSum + downSum != 0
     ? (upSum - downSum) / (upSum + downSum)
     : nz(tmp[1])

// Limit RocketRSI output to +/- 3 Standard Deviations
if tmp > 0.999
	tmp := 0.999

if tmp < -0.999 
    tmp := -0.999

normMult = (applyNormalization ? 25 : 1)

// Apply Fisher Transform to establish Gaussian Probability Distribution
rocketRSI = 0.5 * fixnan(log((1 + tmp) / (1 - tmp)))
rocketRSI := rocketRSI * normMult

obLevel = obosLevel * normMult
osLevel = -obosLevel * normMult

rocketRSIColor = rocketRSI > obLevel ? green : rocketRSI < osLevel ? red : #ff9370

plot(rocketRSI, title="RRSI", linewidth=2, color=rocketRSIColor, transp=0)

plot(obLevel, title="OB", style=circles, color=#3d85c6, transp=0)
hline(0, title="Zero Level", linestyle=dotted)
plot(osLevel, title="OS", style=circles, color=#3d85c6, transp=0)